// Generated by CoffeeScript 1.3.3
(function() {
  var Bar, Geometry, Renderer,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Renderer = (function() {

    function Renderer(container) {
      this.container = container;
      this.width = window.innerWidth;
      this.height = window.innerHeight;
      this.initThree();
      this.initScene();
      this.initCamera();
      this.initLight();
      this.initControls();
      this.objects = [];
    }

    Renderer.prototype.initThree = function() {
      this.renderer = new THREE.WebGLRenderer({
        antialias: true
      });
      this.renderer.setSize(this.width, this.height);
      document.getElementById(this.container).appendChild(this.renderer.domElement);
      return this.renderer.setClearColorHex(0x000000, 1.0);
    };

    Renderer.prototype.initScene = function() {
      return this.scene = new THREE.Scene();
    };

    Renderer.prototype.initCamera = function() {
      this.camera = new THREE.PerspectiveCamera(45, this.width / this.height, 0.01, 1e10);
      this.camera.position.set(500, 800, 500);
      this.camera.up.set(0, 1, 0);
      this.camera.lookAt({
        x: 0,
        y: 150,
        z: 0
      });
      return this.scene.add(this.camera);
    };

    Renderer.prototype.initLight = function() {
      var ambientLight, directionalLight;
      directionalLight = new THREE.DirectionalLight(0xffffff, 1.0);
      directionalLight.position.set(100, 100, 200);
      ambientLight = new THREE.AmbientLight(0x222222, 0.1);
      this.scene.add(directionalLight);
      return this.scene.add(ambientLight);
    };

    Renderer.prototype.initControls = function() {
      this.controls = new THREE.TrackballControls(this.camera);
      this.controls.rotateSpeed = 1.0;
      this.controls.zoomSpeed = 1.3;
      this.controls.panSpeed = 0.8;
      return this.controls.keys = [65, 83, 68];
    };

    Renderer.prototype.add = function(obj) {
      this.objects.push(obj);
      return this.scene.add(obj.getGeometry());
    };

    Renderer.prototype.render = function() {
      this.controls.update();
      this.renderer.clear();
      return this.renderer.render(this.scene, this.camera);
    };

    return Renderer;

  })();

  this.Renderer = Renderer;

  Geometry = (function() {

    function Geometry(geom, mesh, pos) {
      this.geometry = new THREE.Mesh(geom, mesh);
      this.geometry.position.set(pos.x, pos.y, pos.z);
    }

    Geometry.prototype.getGeometry = function() {
      return this.geometry;
    };

    Geometry.prototype.setPosition = function(pos) {
      return this.geometry.position.set(pos);
    };

    return Geometry;

  })();

  Bar = (function(_super) {

    __extends(Bar, _super);

    function Bar(x_width, height, z_width, pos, color) {
      var geom, mesh;
      geom = new THREE.CubeGeometry(x_width, height, z_width);
      mesh = new THREE.MeshLambertMaterial({
        color: color
      });
      Bar.__super__.constructor.call(this, geom, mesh, pos);
    }

    return Bar;

  })(Geometry);

  this.Bar = Bar;

}).call(this);
