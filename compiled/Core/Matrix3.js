// Generated by CoffeeScript 1.3.3
(function() {
  var Matrix3;

  Matrix3 = (function() {

    function Matrix3(a11, a12, a13, a21, a22, a23, a31, a32, a33) {
      this.elements = new Float32Array(9);
      this.set(a11, a12, a13, a21, a22, a23, a31, a32, a33);
    }

    Matrix3.prototype.$ = function(i, j) {
      return this.elements[i * 3 + j];
    };

    Matrix3.prototype.$$ = function(i, j, e) {
      return this.elements[i * 3 + j] = e;
    };

    Matrix3.prototype.set = function(a11, a12, a13, a21, a22, a23, a31, a32, a33) {
      return this.elements = [a11, a12, a13, a21, a22, a23, a31, a32, a33];
    };

    Matrix3.prototype.setOrientation = function(q) {
      var w, x, xw, xx, xy, xz, y, yw, yy, yz, z, zw, zz;
      w = q.w;
      x = q.x;
      y = q.y;
      z = q.z;
      xw = x * w * 2;
      xy = x * y * 2;
      xz = x * z * 2;
      yw = y * w * 2;
      yz = y * z * 2;
      zw = z * w * 2;
      xx = x * x * 2;
      yy = y * y * 2;
      zz = z * z * 2;
      return this.element = [1 - yy - zz, xy + zw, xz - yw, xy - zw, 1 - xx - zz, yz + xw, xz + yw, yz - xw, 1 - xx - yy];
    };

    Matrix3.prototype.identity = function() {
      return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
    };

    Matrix3.prototype.add = function(m) {
      var ma, mb;
      ma = this.elements;
      mb = m.elements;
      return new Matrix3(ma[0] + mb[0], ma[1] + mb[1], ma[2] + mb[2], ma[3] + mb[3], ma[4] + mb[4], ma[5] + mb[5], ma[6] + mb[6], ma[7] + mb[7], ma[8] + mb[8]);
    };

    Matrix3.prototype.addMatrix = function(m) {
      var i, _i, _results;
      _results = [];
      for (i = _i = 0; _i < 9; i = ++_i) {
        _results.push(this.elements[i] += m.elements[i]);
      }
      return _results;
    };

    Matrix3.prototype.mulScalar = function(s) {
      var m;
      m = this.elements;
      return new Matrix3(m[0] * s, m[1] * s, m[2] * s, m[3] * s, m[4] * s, m[5] * s, m[6] * s, m[7] * s, m[8] * s);
    };

    Matrix3.prototype.mulMatrix = function(m) {
      var ma, mb;
      ma = this.elements;
      mb = m.elements;
      return new Matrix3(ma[0] * mb[0] + ma[1] * mb[3] + ma[2] * mb[6], ma[0] * mb[1] + ma[1] * mb[4] + ma[2] * mb[7], ma[0] * mb[2] + ma[1] * mb[5] + ma[2] * mb[8], ma[3] * mb[0] + ma[4] * mb[3] + ma[5] * mb[6], ma[3] * mb[1] + ma[4] * mb[4] + ma[5] * mb[7], ma[3] * mb[2] + ma[4] * mb[5] + ma[5] * mb[8], ma[6] * mb[0] + ma[7] * mb[3] + ma[8] * mb[6], ma[6] * mb[1] + ma[7] * mb[4] + ma[8] * mb[7], ma[6] * mb[2] + ma[7] * mb[5] + ma[8] * mb[8]);
    };

    Matrix3.prototype.mulVector3 = function(v) {
      return new Vector3(v.x * this.elements[0] + v.y * this.elements[1] + v.z * this.elements[2], v.x * this.elements[3] + v.y * this.elements[4] + v.z * this.elements[5], v.x * this.elements[6] + v.y * this.elements[7] + v.z * this.elements[8]);
    };

    Matrix3.prototype.determinant = function() {
      var m;
      m = this.elements;
      return m[0] * m[4] * m[8] + m[3] * m[7] * m[2] + m[6] * m[1] * m[5] - m[0] * m[7] * m[5] - m[6] * m[4] * m[2] - m[3] * m[1] * m[8];
    };

    Matrix3.prototype.transpose = function() {
      var es;
      es = this.elements;
      return new Matrix3(es[0], es[3], es[6], es[1], es[4], es[7], es[2], es[5], es[8]);
    };

    Matrix3.prototype.transposeSelf = function() {
      var es, tmp;
      es = this.elements;
      tmp = es[1];
      es[1] = es[3];
      es[3] = tmp;
      tmp = es[2];
      es[2] = es[6];
      es[6] = tmp;
      tmp = es[5];
      es[5] = es[7];
      es[7] = tmp;
      return this;
    };

    Matrix3.prototype.inverse = function() {
      var det, m;
      m = this.elements;
      det = this.determinant();
      if (det === 0) {
        return;
      }
      return new Matrix3(m[4] * m[8] - m[5] * m[7], m[2] * m[7] - m[1] * m[8], m[1] * m[5] - m[2] * m[4], m[5] * m[6] - m[3] * m[8], m[0] * m[8] - m[2] * m[6], m[2] * m[3] - m[0] * m[5], m[3] * m[7] - m[4] * m[6], m[1] * m[6] - m[0] * m[7], m[0] * m[4] - m[1] * m[3]).mulScalar(1 / det);
    };

    Matrix3.prototype.abs = function() {
      var e, _i, _len, _ref, _results;
      _ref = this.elements;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (e < 0) {
          _results.push(e = Math.abs(e));
        }
      }
      return _results;
    };

    Matrix3.prototype.setFromAxisAngle = function(axis, angle) {
      var c, s, t, x, xy, xz, y, yz, z;
      x = axis.x;
      y = axis.y;
      z = axis.z;
      c = Math.cos(angle);
      s = Math.sin(angle);
      t = 1 - c;
      xy = x * y;
      xz = x * z;
      yz = y * z;
      return this.set(x * x * t + c, xy * t - z * s, xz * t + y * s, xy * t + z * s, y * y * t + c, yz * t - x * s, xz * t - y * s, yz * t + x * s, z * z * t + c);
    };

    Matrix3.prototype.log = function() {
      var es;
      es = this.elements;
      return console.log(es[0] + '\t' + es[1] + '\t' + es[2] + '\n' + es[3] + '\t' + es[4] + '\t' + es[5] + '\n' + es[6] + '\t' + es[7] + '\t' + es[8] + '\n');
    };

    return Matrix3;

  })();

  this.Vizz.Core.Matrix3 = Matrix3;

}).call(this);
