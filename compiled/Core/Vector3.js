// Generated by CoffeeScript 1.3.3
(function() {
  var Vector3;

  Vector3 = (function() {

    function Vector3(x, y, z) {
      this.x = x;
      this.y = y;
      this.z = z;
    }

    Vector3.prototype.set = function(x, y, z) {
      this.x = x;
      this.y = y;
      return this.z = z;
    };

    Vector3.prototype.copy = function(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      return this;
    };

    Vector3.prototype.inverse = function() {
      return new Vector3(-this.x, -this.y, -this.z);
    };

    Vector3.prototype.inverseSelf = function() {
      this.x = -this.x;
      this.y = -this.y;
      return this.z = -this.z;
    };

    Vector3.prototype.add = function(v) {
      return new Vector3(this.x + v.x, this.y + v.y, this.z + v.z);
    };

    Vector3.prototype.addVector = function(v) {
      this.x += v.x;
      this.y += v.y;
      return this.z += v.z;
    };

    Vector3.prototype.addScaledVector = function(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      return this.z += v.z * s;
    };

    Vector3.prototype.sub = function(v) {
      return new Vector3(this.x - v.x, this.y - v.y, this.z - v.z);
    };

    Vector3.prototype.subVector = function(v) {
      this.x -= v.x;
      this.y -= v.y;
      return this.z -= v.z;
    };

    Vector3.prototype.mul = function(s) {
      return new Vector3(this.x * s, this.y * s, this.z * s);
    };

    Vector3.prototype.mulScalar = function(s) {
      this.x *= s;
      this.y *= s;
      return this.z *= s;
    };

    Vector3.prototype.div = function(s) {
      if (s !== 0) {
        return new Vector3(this.x / s, this.y / s, this.z / s);
      }
    };

    Vector3.prototype.divScalar = function(s) {
      if (s !== 0) {
        this.x /= s;
        this.y /= s;
        return this.z /= s;
      }
    };

    Vector3.prototype.dotProduct = function(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z;
    };

    Vector3.prototype.crossProduct = function(v) {
      return new Vector3(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);
    };

    Vector3.prototype.projectOnVector = function(v) {
      return this.dotProduct(v) / v.magnitude();
    };

    Vector3.prototype.projectOnUnit = function(n) {
      return this.dotProduct(n);
    };

    Vector3.prototype.magnitudeSquare = function() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    };

    Vector3.prototype.magnitude = function() {
      return Math.sqrt(this.magnitudeSquare());
    };

    Vector3.prototype.normalize = function() {
      var magnitude;
      magnitude = this.magnitude();
      if (magnitude > 0) {
        return this.div(magnitude);
      }
      return new Vector3(0, 0, 0);
    };

    Vector3.prototype.normalizeSelf = function() {
      var magnitude;
      magnitude = this.magnitude();
      if (magnitude > 0) {
        return this.divScalar(magnitude);
      }
    };

    Vector3.prototype.getAngleX = function() {
      return Math.acos(this.x / this.magnitude());
    };

    Vector3.prototype.getAngleY = function() {
      return Math.acos(this.y / this.magnitude());
    };

    Vector3.prototype.getAngleZ = function() {
      return Math.acos(this.z / this.magnitude());
    };

    Vector3.prototype.getDirectionalCosine = function() {
      var magnitude;
      magnitude = this.magnitude();
      return {
        x: this.x / magnitude,
        y: this.y / magnitude,
        z: this.z / magnitude
      };
    };

    Vector3.prototype.log = function() {
      return console.log(this.x, this.y, this.z);
    };

    return Vector3;

  })();

  this.Vizz.Core.Vector3 = Vector3;

}).call(this);
