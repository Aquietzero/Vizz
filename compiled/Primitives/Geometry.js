// Generated by CoffeeScript 1.3.3
(function() {
  var EventHandler, Geometry, Matrix3, Vector3;

  Vector3 = this.Vizz.Core.Vector3;

  Matrix3 = this.Vizz.Core.Matrix3;

  EventHandler = this.Vizz.EventHandler.EventHandler;

  Geometry = (function() {

    function Geometry(geom, mesh, pos) {
      this.geometry = new THREE.Mesh(geom, mesh);
      this.geometry.material.ambient = this.geometry.material.color;
      this.geometry.castShadow = true;
      this.geometry.receiveShadow = true;
      this.setPosition(pos);
      this.eventHandler = new EventHandler(this);
    }

    Geometry.prototype.getGeometry = function() {
      return this.geometry;
    };

    Geometry.prototype.setPosition = function(pos) {
      return this.geometry.position.set(pos.x, pos.y, pos.z);
    };

    Geometry.prototype.setOrientation = function(dir) {
      var angle, axis, es, m, origin, rotation, target;
      origin = new Vector3(0, 1, 0);
      target = dir.normalize();
      axis = origin.crossProduct(target).normalize();
      angle = Math.acos(origin.dotProduct(target));
      rotation = new Matrix3;
      rotation.setFromAxisAngle(axis, angle);
      m = new THREE.Matrix4;
      es = rotation.elements;
      m.set(es[0], es[1], es[2], 0, es[3], es[4], es[5], 0, es[6], es[7], es[8], 0, 0, 0, 0, 1);
      return this.geometry.applyMatrix(m);
    };

    Geometry.prototype.setConfig = function(user_config, default_config) {
      var key, val, _results;
      _results = [];
      for (key in user_config) {
        val = user_config[key];
        if (default_config.hasOwnProperty(key)) {
          _results.push(default_config[key] = user_config[key]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Geometry.prototype.setColor = function(color) {
      return this.geometry.material.color.setHex(color);
    };

    Geometry.prototype.setOpacity = function(opacity) {
      return this.geometry.material.opacity = opacity;
    };

    return Geometry;

  })();

  this.Vizz.Primitive.Geometry = Geometry;

}).call(this);
